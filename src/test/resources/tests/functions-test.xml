<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<root id="functions-test.xml">
  <executable-group id="-test-">
    <using>
      <valueof id="data">
        <json container="CONTEXT-MAP" name="json-obj"/>
      </valueof>
      <get id="EMPTY" default=""/>
      <get id="COMMA" default=","/>
      <get id="TRUE">$$$true()</get>
      <get id="FALSE">$$$false()</get>
      <get id="CUNS" default="http://www.cuframework.org"/>  <!-- Default CU namespace -->
      <get id="FNCLSN" default="org.cuframework.func.IFunction"/>  <!-- IFunction class name -->
    </using>
    <finally>
      <log id="begin-test-msg">
        <valueof default="Starting function tests..."/>
      </log>
      <assert id="functions-assertions-1" expression="1 and 2 and 3 and 4 and 5 and 6 and 7 and 8 and 9">
        <condition id="1" expression="true, false, false, true">
          <get id="not">$$$not(), $$$not(null), $$$not(true), $$$not(false)</get>
        </condition>
        <condition id="2" expression="false, true, true, false">
          <get id="not">$$$not($$$true()), $$$not($$$false()), $$$not($$$null()), $$$not("")</get>
        </condition>
        <condition id="3" expression="null, T, f, null">
          <get id="ifelse">$$$ifelse(), $$$ifelse($$$true(), T, F), $$$ifelse($$$false(), t, f), $$$ifelse(x, t)</get>
        </condition>
        <condition id="4" expression="null, null, t">
          <get id="ifelse">$$$ifelse($$$null()), $$$ifelse($$$false(), a, b, c), $$$ifelse(true, t)</get>
        </condition>
        <condition id="5" expression="null, T, f, null">
          <get id="ifelsen">$$$ifelsen(), $$$ifelsen($$$true(), T, F), $$$ifelsen($$$false(), t, f), $$$ifelsen(x, t)</get>
        </condition>
        <condition id="6" expression="null, b, X">
          <get id="ifelsen">$$$ifelsen($$$null()), $$$ifelsen($$$false(), a, b, c), $$$ifelsen($$$false(), true, $$$null(), X)</get>
        </condition>
        <condition id="7" expression="false, false, false, true, false, true, false, true, false">
          <get id="and">
            $$$and(), $$$and(null), $$$and($$$null()), $$$and(true), $$$and(false), $$$and(true, $$$true()), $$$and(true, $$$false()), $$$and($$$true()), $$$and($$$false())
          </get>
        </condition>
        <condition id="8" expression="false, false, false, true, false, true, true, true, false">
          <get id="or">
            $$$or(), $$$or(null), $$$or($$$null()), $$$or(true), $$$or(false), $$$or(true, $$$true()), $$$or(true, $$$false()), $$$or($$$true()), $$$or($$$false(), $$$false())
          </get>
        </condition>
        <condition id="9" expression="false, true, true">
          <get id="and-or-not">
            $$$or($$$or(), $$$or(null), $$$or($$$null())), $$$and($$$or(true), $$$not($$$or(false)), $$$or(true, $$$true())), $$$not($$$and(true, $$$false(), $$$or($$$true())))
          </get>
        </condition>
      </assert>
      <assert id="functions-assertions-2" expression="1 and 2 and 3 and 4 and 5 and 6 and 7 and 8 and 9 and abs and abs2">
        <condition id="1" expression="15, 15, 6">
          <get>$$$sum(1,2,3,4,5), $$$sum($$$array(1,2,3,4,5)), $$$sum(6)</get>
        </condition>
        <condition id="2" expression="120, 120, 6">
          <get>$$$multiply(1,2,3,4,5), $$$multiply($$$array(1,2,3,4,5)), $$$multiply(6)</get>
        </condition>
        <condition id="3" expression="1, 2, 4">
          <get>$$$div(8,5), $$$mod(8,3), $$$subtract(6,2)</get>
        </condition>
        <condition id="4" expression="8\.0, 8\.0, 6\.0, 5\.0, 8, 8, 6, 5">
          <get>
            $$$abs(8), $$$abs(-8), $$$ceil(5.3), $$$floor(5.3), $$$int($$$abs(8)), $$$int($$$abs(-8)), $$$int($$$ceil(5.3)), $$$int($$$floor(5.3))
          </get>
        </condition>
        <condition id="5" expression="false, true, true, null, null, null, null">
          <get>
            $$$lt(8, 5), $$$lt(3, 4), $$$lte(6.7, 6.7), $$$lt(3, 4,), $$$lte(,3, 4), $$$lt(3, 4, 5), $$$lte(3)
          </get>
        </condition>
        <condition id="6" expression="true, false, true, true, null, null">
          <get>
            $$$gt(3,1), $$$gt(3.2,3.3), $$$gte(3,1), $$$gte(3,3.0), $$$gt(3,4,5), $$$gte(3)
          </get>
        </condition>
        <condition id="7" expression="false, false, true, true, false, false">
          <get>
            $$$equals(), $$$equals(3), $$$equals(1,1), $$$equals(a,a,a), $$$equals(1,1,2), $$$equals(1,1,)
          </get>
        </condition>
        <condition id="8" expression="false, true">
          <get>
            $$$equals(1,$$$int(1)), $$$equals($$$int(1),$$$int(1))
          </get>
        </condition>
        <condition id="9" expression="true, true, false, false, true, true, false, true">
          <get>
            $$$isnull(), $$$isnull(,), $$$isnull(1), $$$isnull(1,), $$$isnull(,,,), $$$isnull(,,$$$null()), $$$isnull($$$null(),,$), $$$isnull($$$null(),,$unknown-var)
          </get>
        </condition>
        <condition id="abs" expression="8\.0, 8\.0, 6\.0, 5\.0">
          <get>
            $$$abs(8), $$$abs(-8), $$$abs($$$ceil(5.3)), $$$abs($$$floor(5.3))
          </get>
        </condition>
        <condition id="abs2" expression="822\.2, 8\.2, 88, 8, 9, 2">
          <get>
            $$$abs($$$double(-822.2)), $$$abs($$$float(8.2)), $$$abs($$$long(-88)), $$$abs($$$int(-8)), $$$abs($$$short(9)), $$$abs($$$byte(-2))
          </get>
        </condition>
      </assert>
      <assert id="functions-assertions-3" expression="1 and 2 and 3 and 4 and 5 and 6 and 7 and 8 and 9">
        <condition id="1" expression="0, 0, 2, 2, 2, 2, 3, 1, null">  <!-- White space in function params is ignored
                                                                           hence $$$length(  ) would evaluate to 0.
                                                                           Also comma is used as delimiter of function params
                                                                           and empty params before and after the comma would
                                                                           also be counted -->
          <get>
            $$$length(), $$$length(  ), $$$length(1,2), $$$length(1,), $$$length(,1), $$$length(,), $$$length(,,), $$$length(2), $$$length($$$null())
          </get>
        </condition>
        <condition id="2" expression="6, 5, 3">
          <get>$$$length(abcdef), $$$length($$$array(1,2,3,4,5)), $$$length($$$array(1,2,3,4,5), a, b)</get>
        </condition>
        <condition id="3" expression="12345, 34">
          <get id="array-cor1">
            $$$str-join(,$$$array-copyofrange($$$array(1,2,3,4,5))), $$$str-join(,$$$array-copyofrange($$$array(1,2,3,4,5), 2, 4))
          </get>
        </condition>
        <condition id="4" expression="null, null">
          <get id="array-cor2">
            $$$array-copyofrange($$$array(1,2,3,4,5), 2, 4, excess-param), $$$array-copyofrange($$$array(1,2,3,4,5), 2, 4,)
          </get>
        </condition>
        <condition id="5" expression="true, false, null">
          <get>
            $$$array-contains($$$array(1,2,3), 3), $$$array-contains($$$array(1,2,3), 33), $$$array-contains($$$array(1,2,3), 3, excess-param)
          </get>
        </condition>
        <condition id="6" expression="22, null, null">
          <get>
            $$$array-item($$$array(11,22,33), 1), $$$array-item($$$array(11,22,33), 33), $$$array-item($$$array(11,22,33), 1, excess-param)
          </get>
        </condition>
        <condition id="7" expression="123456789, 123456789">
          <get>
            $$$str-join(,$$$array-sort($$$array(1, 2, 3, 5, 4, 9, 6, 8, 7))), $$$str-join(,$$$array-sort(1,2,3,5,4,9,6,8,7))
          </get>
        </condition>
        <condition id="8" expression="true, true, false, null">
          <select>
            $$$map-contains($map, 1), $$$map-contains($map, 2), $$$map-contains($map, 3), $$$map-contains($map, 1, excess-param)
            <using>
              <headless-executable-group id="map">
                <using>
                  <get id="group-serializer-type" default="map"/>
                </using>
                <get id="1" default="1st value"/>
                <get id="2" default="2nd value"/>
              </headless-executable-group>
            </using>
          </select>
        </condition>
        <condition id="9" expression="1st value, 2nd value, null, null">
          <select>
            $$$map-item($map, 1), $$$map-item($map, 2), $$$map-item($map, 3), $$$map-item($map, 1, excess-param)
            <using>
              <headless-executable-group id="map">
                <using>
                  <get id="group-serializer-type" default="map"/>
                </using>
                <get id="1" default="1st value"/>
                <get id="2" default="2nd value"/>
              </headless-executable-group>
            </using>
          </select>
        </condition>
      </assert>
      <assert id="functions-assertions-4" expression="1 and 2 and 3 and 4 and 5 and 6 and 7 and 8 and 9 and 10">
        <condition id="1" expression="abcdef, abcdef, abcdef, bcdef, bcdef">
          <get>
            $$$substring(abcdef), $$$substring(abcdef, 0), $$$substring(abcdef, 0, 6), $$$substring(abcdef,1,), $$$substring(abcdef,1,-1)
          </get>
        </condition>
        <condition id="2" expression="abcd, abcd, cd, null, null">
          <get>
            $$$substring(abcdef,,4), $$$substring(abcdef, -1, 4), $$$substring(abcdef, 2, 4), $$$substring(abcdef, -2, 4), $$$substring(abcdef, 0, 44)
          </get>
        </condition>
        <condition id="3" expression="abcdef, abdcefdc, abcdef, abc">
          <get>
            $$$str-replace(abcdef), $$$str-replace(abcdefcd, cd, dc), $$$str-replace(abcdef,$EMPTY,$EMPTY), $$$str-replace(abcdef,def,$EMPTY)
          </get>
        </condition>
        <condition id="4" expression="abcdef, dbddefd">
          <get>
            $$$str-replaceregex(abcdef), $$$str-replaceregex(abcdefc,[c$COMMA;a],d)
          </get>
        </condition>
        <condition id="5" expression="abcdef, abc">
          <get>
            $$$str-replaceregex(abcdef,$EMPTY,$EMPTY), $$$str-replaceregex(abcdefde,d.*,$EMPTY)
          </get>
        </condition>
        <condition id="6" expression="6, 2, 2">
          <get>
            $$$length($$$str-split(abcdef)), $$$length($$$str-split(abcdef, c)), $$$length($$$str-split(abcdef, a))
          </get>
        </condition>
        <condition id="7" expression="1, 2">
          <get>
            $$$length($$$str-split(abcdef, f)), $$$length($$$str-split(abcdef, f, -1))
          </get>
        </condition>
        <condition id="8" expression="null, abcdef %s, abcdef ijk, a:b">
          <get>
            $$$str-format(), $$$str-format(abcdef %s), $$$str-format(abcdef %s, ijk), $$$str-format(%s:%s, a, b)
          </get>
        </condition>
        <condition id="9" expression="b, c, null, 5, null">
          <get>
            $$$str-charat(abcde, 1), $$$str-charat(abcde, $$$int(2)), $$$str-charat(abcde,), $$$length($$$str-tochararray(abcde)), $$$str-tochararray()
          </get>
        </condition>
        <condition id="10" expression="true, false">
          <get>
            $$$equals($$$str-charat(abcde, 4), $$$str-charat(e, 0)), $$$equals($$$str-charat(abcde, 4), e)
          </get>
        </condition>
      </assert>
      <assert id="functions-assertions-5" expression="1 and 2 and 3 and 4 and 5 and 6 and 7 and 8 and 9">
        <condition id="1" expression="false, false, true">
          <get>
            $$$isnull($$$class(java.util.ArrayList)), $$$isnull($$$toclass(java.util.ArrayList)), $$$isnull($$$toclass(java.util.ArrayList,))
          </get>
        </condition>
        <condition id="2" expression="1, 2, true">
          <get>
            $$$length($$$toclassarray(java.util.ArrayList)), $$$length($$$toclassarray(java.util.ArrayList,)), $$$instanceof($$$instantiate(java.util.ArrayList), java.util.ArrayList)
          </get>
        </condition>
        <condition id="3" expression="true, true">
          <select>
            $$$instanceof($$$instantiate($$$constructor($ALIST)), $ALIST), $$$instanceof($$$instantiate($$$constructor($ALIST, $$$toclassarray($$$class(int)),), $$$array($$$int(5))), $ALIST)
            <using>
              <get id="ALIST" default="java.util.ArrayList"/>
            </using>
          </select>
        </condition>
        <condition id="4" expression="0, 0">
          <get>
            $$$length($$$instantiate($$$constructor(java.util.ArrayList))), $$$length($$$instantiate($$$constructor(java.util.ArrayList, $$$toclassarray($$$class(int)),), $$$array($$$int(5))))
          </get>
        </condition>
        <condition id="5"> <!-- not defining any expression as there is nothing to validate the outcome of casting. Just exception shouldn't be thrown -->
          <get>
            $$$cast($$$instantiate(java.util.ArrayList), $$$class(java.util.AbstractList)), $$$cast($$$instantiate(java.util.Properties), $$$class(java.util.Hashtable))
          </get>
        </condition>
        <condition id="6" expression="0, 1, 3">
          <get>
            $$$length($$$array-oftype($$$class(int))), $$$length($$$array-oftype($$$class(java.lang.Integer),)), $$$length($$$array-oftype($$$class(int), $$$int(1),, $$$int(2)))
          </get>
        </condition>
        <condition id="7" expression="true, true, true, true, true, true, true, true">
          <select>
            $$$instanceof($Z, [Z), $$$instanceof($C, [C), $$$instanceof($B, [B), $$$instanceof($S, [S), $$$instanceof($I, [I), $$$instanceof($J, [J), $$$instanceof($F, [F), $$$instanceof($D, [D)
            <using>
              <get id="Z">$$$array-oftype($$$class(boolean))</get>
              <get id="C">$$$array-oftype($$$class(char))</get>
              <get id="B">$$$array-oftype($$$class(byte))</get>
              <get id="S">$$$array-oftype($$$class(short))</get>
              <get id="I">$$$array-oftype($$$class(int))</get>
              <get id="J">$$$array-oftype($$$class(long))</get>
              <get id="F">$$$array-oftype($$$class(float))</get>
              <get id="D">$$$array-oftype($$$class(double))</get>
            </using>
          </select>
        </condition>
        <condition id="8" expression="2, false">
          <get>
            $$$array-item($$$array-oftype($$$class(int), $$$int(1), $$$int(2)), 1), $$$array-item($$$array-oftype($$$class(boolean), $$$true(), $$$false()), 1)
          </get>
        </condition>
        <condition id="9" expression="false, \u0000, 0, 0, 0, 0, 0\.0, 0\.0"> <!-- default values of primitive data types -->
          <select>
            $$$array-item($Z, 0), $$$array-item($C, 0), $$$array-item($B, 0), $$$array-item($S, 0), $$$array-item($I, 0), $$$array-item($J, 0), $$$array-item($F, 0), $$$array-item($D, 0)
            <using>
              <get id="Z">$$$array-oftype($$$class(boolean),)</get>
              <get id="C">$$$array-oftype($$$class(char),)</get>
              <get id="B">$$$array-oftype($$$class(byte),)</get>
              <get id="S">$$$array-oftype($$$class(short),)</get>
              <get id="I">$$$array-oftype($$$class(int),)</get>
              <get id="J">$$$array-oftype($$$class(long),)</get>
              <get id="F">$$$array-oftype($$$class(float),)</get>
              <get id="D">$$$array-oftype($$$class(double),)</get>
            </using>
          </select>
        </condition>
      </assert>
      <assert id="functions-assertions-6" expression="1 and 2">
        <condition id="1" expression="true, true, true, true">
          <get>
            $$$instanceof($$$ifunc-ref(int), $FNCLSN), $$$instanceof($$$ifunc-ref(abs,), $FNCLSN), $$$instanceof($$$ifunc-ref(mod, $CUNS), $FNCLSN), $$$isnull($$$ifunc-ref(mod, unknownns))
          </get>
        </condition>
        <condition id="2" expression="2, 3.0, 5.0, true">
          <get>
            $$$ifunc-invoke($$$ifunc-ref(int), 2), $$$ifunc-invoke($$$ifunc-ref(float,), 3), $$$ifunc-invoke2($$$ifunc-ref(double, $CUNS), $$$array(5)), $$$ifunc-invoke2($$$ifunc-ref(true))
          </get>
        </condition>
      </assert>
      <assert id="functions-assertions-7" expression="1 and 2 and 3 and 4 and 5 and 6 and 7 and 8 and 9">
        <condition id="1" expression="true, true, 2">
          <get>
            $$$instanceof($$$tolist($$$array(1,2,3)), java.util.List), $$$instanceof($$$toset($$$array(1,2,3)), java.util.Set), $$$array-item($$$toarray($$$tolist($$$array(1,2,3))),1)
          </get>
        </condition>
        <condition id="2" expression="3, 3">
          <get>
            $$$length($$$toset($$$array(1,2,2,3,3,3))), $$$array-item($$$toarray($$$tolist($$$toset($$$array(1,2,1,1,3,3)))),2)
          </get>
        </condition>
        <condition id="3" expression="3, 5">
          <get>
            $$$length($$$toset($$$array-oftype($$$class(int),$$$int(1),$$$int(2),$$$int(2),$$$int(3),$$$int(3)))), $$$length($$$toset($$$str-split(12233aabb)))
          </get>
        </condition>
        <condition id="4" expression="1, 1, 2">
          <select>
            $$$length($$$toset($$$array-oftype($Z, $TRUE, $TRUE))), $$$length($$$toset($$$array-oftype($Z, $FALSE, $FALSE))), $$$length($$$toset($$$array-oftype($Z, $TRUE, $FALSE)))
            <using>
              <get id="Z">$$$class(boolean)</get>
            </using>
          </select>
        </condition>
        <condition id="5" expression="3, 2, 2, 7, 2, 3, 1, 2, 3, 3, 3">
          <select>
            $$$length($sO), $$$length($sZ), $$$length($sZ2), $$$length($sC), $$$length($sB), $$$length($sS), $$$length($sI), $$$length($sI2), $$$length($sJ), $$$length($sF), $$$length($sD)
            <using>
              <get id="sO">$$$toset($$$array(abc, def, ghi, abc))</get>
              <get id="sZ">$$$toset($$$array-oftype($$$class(boolean),$TRUE, $TRUE, $FALSE, $FALSE, $TRUE))</get>
              <get id="sZ2">$$$toset($$$array-oftype($$$class(boolean),$TRUE, $TRUE, $FALSE, $FALSE, $TRUE,))</get>
              <get id="sC">$$$toset($$$str-tochararray(abcdefabg))</get>
              <get id="sB">$$$toset($$$array-oftype($$$class(byte), $$$byte(2), $$$byte(3), $$$byte(2)))</get>
              <get id="sS">$$$toset($$$array-oftype($$$class(short), $$$short(1), $$$short(2), $$$short(3), $$$short(1)))</get>
              <get id="sI">$$$toset($$$array-oftype($$$class(int), $$$int(2), $$$int(2), $$$int(2)))</get>
              <get id="sI2">$$$toset($$$array-oftype($$$class(int), $$$int(2), $$$int(2), $$$int(2),,,,,,,,,))</get>
              <get id="sJ">$$$toset($$$array-oftype($$$class(long), $$$long(2), $$$long(3), $$$long(3), $$$long(4)))</get>
              <get id="sF">$$$toset($$$array-oftype($$$class(float), $$$float(2.0), $$$float(3.0), $$$float(3), $$$float(4)))</get>
              <get id="sD">$$$toset($$$array-oftype($$$class(double), $$$double(2.0), $$$double(3.0), $$$double(3), $$$double(4)))</get>
            </using>
          </select>
        </condition>
        <condition id="6" expression="4, 5, 9, 3, 4, 3, 4, 4, 4">
          <select>
            $$$length($sO), $$$length($sZ), $$$length($sC), $$$length($sB), $$$length($sS), $$$length($sI), $$$length($sJ), $$$length($sF), $$$length($sD)
            <using>
              <get id="sO">$$$tolist($$$array(abc, def, ghi, abc))</get>
              <get id="sZ">$$$tolist($$$array-oftype($$$class(boolean),$TRUE, $TRUE, $FALSE, $FALSE, $TRUE))</get>
              <get id="sC">$$$tolist($$$str-tochararray(abcdefabg))</get>
              <get id="sB">$$$tolist($$$array-oftype($$$class(byte), $$$byte(2), $$$byte(3), $$$byte(2)))</get>
              <get id="sS">$$$tolist($$$array-oftype($$$class(short), $$$short(1), $$$short(2), $$$short(3), $$$short(1)))</get>
              <get id="sI">$$$tolist($$$array-oftype($$$class(int), $$$int(2), $$$int(2), $$$int(2)))</get>
              <get id="sJ">$$$tolist($$$array-oftype($$$class(long), $$$long(2), $$$long(3), $$$long(3), $$$long(4)))</get>
              <get id="sF">$$$tolist($$$array-oftype($$$class(float), $$$float(2.0), $$$float(3.0), $$$float(3), $$$float(4)))</get>
              <get id="sD">$$$tolist($$$array-oftype($$$class(double), $$$double(2.0), $$$double(3.0), $$$double(3), $$$double(4)))</get>
            </using>
          </select>
        </condition>
        <condition id="7" expression="3, 2, 2, 7, 2, 3, 1, 2, 3, 3, 3">
          <select>
            $$$length($sO), $$$length($sZ), $$$length($sZ2), $$$length($sC), $$$length($sB), $$$length($sS), $$$length($sI), $$$length($sI2), $$$length($sJ), $$$length($sF), $$$length($sD)
            <using>
              <get id="sO">$$$toarray($$$toset($$$array(abc, def, ghi, abc)))</get>
              <get id="sZ">$$$toarray($$$toset($$$array-oftype($$$class(boolean),$TRUE, $TRUE, $FALSE, $FALSE, $TRUE)))</get>
              <get id="sZ2">$$$toarray($$$toset($$$array-oftype($$$class(boolean),$TRUE, $TRUE, $FALSE, $FALSE, $TRUE,)))</get>
              <get id="sC">$$$toarray($$$toset($$$str-tochararray(abcdefabg)))</get>
              <get id="sB">$$$toarray($$$toset($$$array-oftype($$$class(byte), $$$byte(2), $$$byte(3), $$$byte(2))))</get>
              <get id="sS">$$$toarray($$$toset($$$array-oftype($$$class(short), $$$short(1), $$$short(2), $$$short(3), $$$short(1))))</get>
              <get id="sI">$$$toarray($$$toset($$$array-oftype($$$class(int), $$$int(2), $$$int(2), $$$int(2))))</get>
              <get id="sI2">$$$toarray($$$toset($$$array-oftype($$$class(int), $$$int(2), $$$int(2), $$$int(2),,,,,,,,,)))</get>
              <get id="sJ">$$$toarray($$$toset($$$array-oftype($$$class(long), $$$long(2), $$$long(3), $$$long(3), $$$long(4))))</get>
              <get id="sF">$$$toarray($$$toset($$$array-oftype($$$class(float), $$$float(2.0), $$$float(3.0), $$$float(3), $$$float(4))))</get>
              <get id="sD">$$$toarray($$$toset($$$array-oftype($$$class(double), $$$double(2.0), $$$double(3.0), $$$double(3), $$$double(4))))</get>
            </using>
          </select>
        </condition>
        <condition id="8" expression="4, 5, 9, 3, 4, 3, 4, 4, 4">
          <select>
            $$$length($sO), $$$length($sZ), $$$length($sC), $$$length($sB), $$$length($sS), $$$length($sI), $$$length($sJ), $$$length($sF), $$$length($sD)
            <using>
              <get id="sO">$$$toarray($$$tolist($$$array(abc, def, ghi, abc)))</get>
              <get id="sZ">$$$toarray($$$tolist($$$array-oftype($$$class(boolean),$TRUE, $TRUE, $FALSE, $FALSE, $TRUE)))</get>
              <get id="sC">$$$toarray($$$tolist($$$str-tochararray(abcdefabg)))</get>
              <get id="sB">$$$toarray($$$tolist($$$array-oftype($$$class(byte), $$$byte(2), $$$byte(3), $$$byte(2))))</get>
              <get id="sS">$$$toarray($$$tolist($$$array-oftype($$$class(short), $$$short(1), $$$short(2), $$$short(3), $$$short(1))))</get>
              <get id="sI">$$$toarray($$$tolist($$$array-oftype($$$class(int), $$$int(2), $$$int(2), $$$int(2))))</get>
              <get id="sJ">$$$toarray($$$tolist($$$array-oftype($$$class(long), $$$long(2), $$$long(3), $$$long(3), $$$long(4))))</get>
              <get id="sF">$$$toarray($$$tolist($$$array-oftype($$$class(float), $$$float(2.0), $$$float(3.0), $$$float(3), $$$float(4))))</get>
              <get id="sD">$$$toarray($$$tolist($$$array-oftype($$$class(double), $$$double(2.0), $$$double(3.0), $$$double(3), $$$double(4))))</get>
            </using>
          </select>
        </condition>
        <condition id="9" expression="4, 5, 9, 3, 4, 3, 4, 4, 4">
          <select>
            $$$length($sO), $$$length($sZ), $$$length($sC), $$$length($sB), $$$length($sS), $$$length($sI), $$$length($sJ), $$$length($sF), $$$length($sD)
            <using>
              <get id="sO">$$$toarray($$$array(abc, def, ghi, abc))</get>
              <get id="sZ">$$$toarray($$$array-oftype($$$class(boolean),$TRUE, $TRUE, $FALSE, $FALSE, $TRUE))</get>
              <get id="sC">$$$toarray($$$str-tochararray(abcdefabg))</get>
              <get id="sB">$$$toarray($$$array-oftype($$$class(byte), $$$byte(2), $$$byte(3), $$$byte(2)))</get>
              <get id="sS">$$$toarray($$$array-oftype($$$class(short), $$$short(1), $$$short(2), $$$short(3), $$$short(1)))</get>
              <get id="sI">$$$toarray($$$array-oftype($$$class(int), $$$int(2), $$$int(2), $$$int(2)))</get>
              <get id="sJ">$$$toarray($$$array-oftype($$$class(long), $$$long(2), $$$long(3), $$$long(3), $$$long(4)))</get>
              <get id="sF">$$$toarray($$$array-oftype($$$class(float), $$$float(2.0), $$$float(3.0), $$$float(3), $$$float(4)))</get>
              <get id="sD">$$$toarray($$$array-oftype($$$class(double), $$$double(2.0), $$$double(3.0), $$$double(3), $$$double(4)))</get>
            </using>
          </select>
        </condition>
      </assert>
      <assert id="functions-assertions-8" expression="1 and 2 and 3 and 4 and 5">
        <condition id="1" expression="\[Ljava.lang.String;">
          <select id="the-else-part-of-ifelse-should-never-execute-and-would-result-into-a-classcastexception">
            $$$typeof($$$ifelse($$$instanceof($str-array, $$$class([Ljava.lang.String;)), $str-array, $$$str-split($str-array,$COMMA)))
            <using>
              <get id="str-array">$$$str-split(a|b|c|d|e,|)</get>
            </using>
          </select>
        </condition>
        <condition id="2" expression="abc, xyz">
          <select id="the-last-part-of-any-ifelsen-should-not-execute-or-it-would-result-into-a-classcastexception">
            $$$ifelsen($$$true(), abc, $$$str-split($str-array,$COMMA)), $$$ifelsen($$$false(), $$$null(), xyz, $$$str-split($str-array,$COMMA)) 
            <using>
              <get id="str-array">$$$str-split(a|b|c|d|e,|)</get>
            </using>
          </select>
        </condition>
        <condition id="3" expression="false">
          <select id="the-and-should-shortcircuit-and-its-the-last-param-should-not-execute-or-it-will-result-into-a-classcastexception">
            $$$and($$$true(), $$$true(), $$$false(), $$$str-split($str-array,$COMMA))
            <using>
              <get id="str-array">$$$str-split(a|b|c|d|e,|)</get>
            </using>
          </select>
        </condition>
        <condition id="4" expression="true">
          <select id="the-or-should-shortcircuit-and-its-the-last-param-should-not-execute-or-it-will-result-into-a-classcastexception">
            $$$or($$$false(), $$$false(), $$$true(), $$$str-split($str-array,$COMMA))
            <using>
              <get id="str-array">$$$str-split(a|b|c|d|e,|)</get>
            </using>
          </select>
        </condition>
        <condition id="5" expression="false, false">
          <select id="the-isnull-should-shortcircuit-and-its-the-last-param-should-not-execute-or-it-will-result-into-a-classcastexception">
            $$$isnull($$$null(), $unknown-var,, 1, $$$str-split($str-array,$COMMA)), $$$isnull(,,,, 1, $$$str-split($str-array,$COMMA))
            <using>
              <get id="str-array">$$$str-split(a|b|c|d|e,|)</get>
            </using>
          </select>
        </condition>
      </assert>
      <log id="end-test-msg">
        <valueof default="Finished function tests."/>
      </log>
    </finally>
  </executable-group>
  <headless-group id="-test-data-">
    <headless-group id="1">
      <init>
        <load-properties id="input">
          <using>
            <valueof id="stream" default='1=first;2=second;json-obj={"key1":{"name":"key-name","int-array":[1,11,111],"obj":{"name":"obj-name"}},"key2":[]}'/>
          </using>
          <init>
            <set attribute="1" in="TEST-INPUT-MAP" createMapIfMissing="true" override="false">
              <valueof key="$_execution-resultmap">
                <internal-map/>
              </valueof>
            </set>
          </init>
        </load-properties>
        <load-properties id="output">
          <using>
            <valueof id="stream" default="result=0"/>
          </using>
          <init>
            <set attribute="1" in="TEST-OUTPUT-MAP" createMapIfMissing="true" override="false">
              <valueof key="$_execution-resultmap">
                <internal-map/>
              </valueof>
            </set>
          </init>
        </load-properties>
      </init>
    </headless-group>
  </headless-group>
</root>
